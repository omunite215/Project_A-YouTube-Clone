/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as VideoIdRouteImport } from './routes/video.$id'
import { Route as SearchSearchTermRouteImport } from './routes/search.$searchTerm'
import { Route as ChannelIdRouteImport } from './routes/channel.$id'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const VideoIdRoute = VideoIdRouteImport.update({
  id: '/video/$id',
  path: '/video/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchSearchTermRoute = SearchSearchTermRouteImport.update({
  id: '/search/$searchTerm',
  path: '/search/$searchTerm',
  getParentRoute: () => rootRouteImport,
} as any)
const ChannelIdRoute = ChannelIdRouteImport.update({
  id: '/channel/$id',
  path: '/channel/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/channel/$id': typeof ChannelIdRoute
  '/search/$searchTerm': typeof SearchSearchTermRoute
  '/video/$id': typeof VideoIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/channel/$id': typeof ChannelIdRoute
  '/search/$searchTerm': typeof SearchSearchTermRoute
  '/video/$id': typeof VideoIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/channel/$id': typeof ChannelIdRoute
  '/search/$searchTerm': typeof SearchSearchTermRoute
  '/video/$id': typeof VideoIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/channel/$id' | '/search/$searchTerm' | '/video/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/channel/$id' | '/search/$searchTerm' | '/video/$id'
  id: '__root__' | '/' | '/channel/$id' | '/search/$searchTerm' | '/video/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChannelIdRoute: typeof ChannelIdRoute
  SearchSearchTermRoute: typeof SearchSearchTermRoute
  VideoIdRoute: typeof VideoIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/video/$id': {
      id: '/video/$id'
      path: '/video/$id'
      fullPath: '/video/$id'
      preLoaderRoute: typeof VideoIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search/$searchTerm': {
      id: '/search/$searchTerm'
      path: '/search/$searchTerm'
      fullPath: '/search/$searchTerm'
      preLoaderRoute: typeof SearchSearchTermRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/channel/$id': {
      id: '/channel/$id'
      path: '/channel/$id'
      fullPath: '/channel/$id'
      preLoaderRoute: typeof ChannelIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChannelIdRoute: ChannelIdRoute,
  SearchSearchTermRoute: SearchSearchTermRoute,
  VideoIdRoute: VideoIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
